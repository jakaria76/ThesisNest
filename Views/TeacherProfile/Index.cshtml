@model ThesisNest.Models.TeacherProfile
@using ThesisNest.Models

@{
    ViewData["Title"] = "My Teacher Profile";

    var imgSrc = (Model?.ProfileImage != null && !string.IsNullOrEmpty(Model.ProfileImageContentType))
        ? Url.Action("Photo", "TeacherProfile", new { id = Model.Id })
        : "https://via.placeholder.com/240x240.png?text=User";

    var departments = (IEnumerable<Department>)(ViewData["Departments"] ?? Enumerable.Empty<Department>());
}

<div class="container-xxl py-4">
    @if (TempData["Success"] != null)
    {
        <div class="alert alert-success shadow-sm">@TempData["Success"]</div>
    }
    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger shadow-sm">@TempData["Error"]</div>
    }

    @if (Model == null)
    {
        <div class="card border-0 shadow-sm p-4 text-center">
            <div class="mb-2">No profile found.</div>
            <a asp-action="Create" class="btn btn-primary">Create Profile</a>
        </div>
    }
    else
    {
        <div class="tn-profile card border-0 shadow-lg overflow-hidden">

            <!-- Banner -->
            <div class="tnp-banner"></div>

            <!-- Header -->
            <div class="tnp-header px-3 px-md-4 pb-3 pb-md-4">
                <div class="d-flex align-items-center gap-3 gap-md-4 tnp-headrow">
                    <div class="tnp-avatar-wrap">
                        <img src="@imgSrc" class="tnp-avatar" alt="Profile" />
                    </div>
                    <div class="flex-grow-1 min-w-0">
                        <h2 class="tnp-name mb-1 text-truncate" title="@Model.FullName">@Model.FullName</h2>
                        <div class="text-muted tn-dim">@Model.Designation</div>
                        <div class="text-muted small tn-dim">@Model.Department</div>
                        <div class="tnp-chipwrap d-flex flex-wrap gap-2 mt-2">
                            @if (!string.IsNullOrWhiteSpace(Model.Email))
                            {
                                <a class="tnp-chip" href="mailto:@Model.Email"><i class="bi bi-envelope me-2"></i>@Model.Email</a>
                            }
                            @if (!string.IsNullOrWhiteSpace(Model.Phone))
                            {
                                <a class="tnp-chip" href="tel:@Model.Phone"><i class="bi bi-telephone me-2"></i>@Model.Phone</a>
                            }
                            @if (!string.IsNullOrWhiteSpace(Model.OfficeLocation))
                            {
                                <span class="tnp-chip"><i class="bi bi-geo-alt me-2"></i>@Model.OfficeLocation</span>
                            }
                        </div>
                    </div>

                    <div class="ms-auto d-none d-md-block">
                        <a asp-action="Edit" class="btn btn-primary me-2"><i class="bi bi-pencil-square me-1"></i>Edit</a>
                        <form asp-action="Delete" method="post" class="d-inline" onsubmit="return confirm('Delete your profile?');">
                            @Html.AntiForgeryToken()
                            <button class="btn btn-outline-danger"><i class="bi bi-trash"></i> Delete</button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Body -->
            <div class="tnp-body px-3 px-md-4">
                <div class="row g-4">

                    <!-- AT A GLANCE -->
                    <div class="col-12 col-lg-6">
                        <div class="tnp-block">
                            <div class="tnp-block-title">At a Glance</div>
                            <div class="row g-3">
                                <div class="col-6">
                                    <div class="card border-0 shadow-sm h-100 text-center p-3">
                                        <div class="tn-subtitle">Ongoing Thesis</div>
                                        <div class="display-6 fw-bold">@Model.OngoingThesisCount</div>
                                    </div>
                                </div>
                                <div class="col-6">
                                    <div class="card border-0 shadow-sm h-100 text-center p-3">
                                        <div class="tn-subtitle">Completed</div>
                                        <div class="display-6 fw-bold">@Model.CompletedThesisCount</div>
                                    </div>
                                </div>

                                <div class="col-12">
                                    <div class="tn-alert d-flex align-items-center gap-2 small m-0">
                                        <i class="bi bi-link-45deg"></i>
                                        <div class="text-truncate"><strong>Slug:</strong> <code class="tn-code">@Model.Slug</code></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- ABOUT + ACTIVITY -->
                    <div class="col-12 col-lg-6">
                        <div class="tnp-block">
                            <div class="tnp-block-title">About</div>
                            <dl class="tnp-dl">
                                <dt>Bio</dt>
                                <dd class="text-wrap">@Model.Bio</dd>
                                <dt>Research</dt>
                                <dd class="text-wrap">@Model.ResearchSummary</dd>
                            </dl>
                        </div>

                        <div class="tnp-block">
                            <div class="tnp-block-title">Activity</div>
                            <ul class="list-group list-group-flush shadow-sm tnp-activity-list">
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    Created at <span class="tn-badge-date">@Model.CreatedAt.ToLocalTime()</span>
                                </li>
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    Last updated <span class="tn-badge-date">@Model.UpdatedAt.ToLocalTime()</span>
                                </li>
                            </ul>
                        </div>
                    </div>

                    <!-- CONTACT + GOOGLE MAP -->
                    <div class="col-12">
                        <div class="tnp-block">
                            <div class="tnp-block-title">Contact & Office Location</div>
                            <dl class="tnp-dl">
                                <dt>Email</dt>
                                <dd>@Model.Email</dd>
                                <dt>Phone</dt>
                                <dd>@Model.Phone</dd>
                                <dt>Office</dt>
                                <dd>@Model.OfficeLocation</dd>
                                <dt>Visibility</dt>
                                <dd>
                                    Email: <strong>@(Model.IsPublicEmail ? "Public" : "Private")</strong>,
                                    Phone: <strong>@(Model.IsPublicPhone ? "Public" : "Private")</strong>
                                </dd>
                            </dl>

                            <!-- Latitude/Longitude Inputs -->
                            <div class="row g-3 mb-3">
                                <div class="col-md-3">
                                    <label asp-for="Latitude" class="form-label">Latitude</label>
                                    <input asp-for="Latitude" class="form-control" id="latBox" />
                                </div>
                                <div class="col-md-3">
                                    <label asp-for="Longitude" class="form-label">Longitude</label>
                                    <input asp-for="Longitude" class="form-control" id="lngBox" />
                                </div>
                            </div>

                            <!-- GOOGLE MAP -->
                            <div id="map" style="width:100%;height:320px;border-radius:12px"></div>
                            <div class="form-text">Marker drag করলে Latitude/Longitude আপডেট হবে।</div>
                        </div>
                    </div>

                    <!-- THESES -->
                    <div class="col-12">
                        <div class="tnp-block">
                            <div class="tnp-block-title d-flex justify-content-between align-items-center flex-wrap gap-2">
                                <span>Theses</span>
                                <!-- Add Thesis Form -->
                                <form asp-action="AddThesis" method="post" class="thesis-form">
                                    @Html.AntiForgeryToken()
                                    <input name="title" class="form-control" placeholder="Add thesis title..." required />
                                    <select name="departmentId" class="form-select" required>
                                        <option value="">Select department</option>
                                        @foreach (var d in departments)
                                        {
                                            <option value="@d.Id">@d.Name</option>
                                        }
                                    </select>
                                    <select name="status" class="form-select">
                                        <option value="@((int)ThesisStatus.InProgress)">Ongoing</option>
                                        <option value="@((int)ThesisStatus.Proposed)">Proposed</option>
                                        <option value="@((int)ThesisStatus.Completed)">Completed</option>
                                    </select>
                                    <button class="btn btn-primary d-inline-flex align-items-center">
                                        <i class="bi bi-plus-lg me-1"></i> Add
                                    </button>
                                </form>
                            </div>

                            <div class="table-responsive">
                                <table class="table align-middle m-0">
                                    <thead>
                                        <tr>
                                            <th>Title</th>
                                            <th>Status</th>
                                            <th>Created</th>
                                            <th class="text-end">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var t in (Model.Theses ?? Enumerable.Empty<Thesis>()).OrderByDescending(x => x.CreatedAt))
                                        {
                                            <tr>
                                                <td class="text-wrap">@t.Title</td>
                                                <td><span class="tn-badge-status tn-badge-@t.Status.ToString().ToLower()">@t.Status</span></td>
                                                <td>@t.CreatedAt.ToLocalTime()</td>
                                                <td class="text-end">
                                                    <div class="tn-thesis-actions d-flex flex-wrap gap-1 justify-content-end">
                                                        <!-- Status buttons + delete -->
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <!-- Footer for mobile -->
            <div class="tnp-footer px-3 px-md-4 py-3 d-block d-md-none">
                <div class="d-grid gap-2">
                    <a asp-action="Edit" class="btn btn-primary"><i class="bi bi-pencil-square me-1"></i>Edit</a>
                    <form asp-action="Delete" method="post" onsubmit="return confirm('Delete your profile?');">
                        @Html.AntiForgeryToken()
                        <button class="btn btn-outline-danger"><i class="bi bi-trash"></i> Delete</button>
                    </form>
                </div>
            </div>

        </div>
    }
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const LAT_INIT = parseFloat('@((Model.Latitude ?? 23.7639).ToString(System.Globalization.CultureInfo.InvariantCulture))');
        const LNG_INIT = parseFloat('@((Model.Longitude ?? 90.4067).ToString(System.Globalization.CultureInfo.InvariantCulture))');
        const latBox = document.getElementById('latBox');
        const lngBox = document.getElementById('lngBox');

        window.initMap = function () {
            const start = { lat: isNaN(LAT_INIT) ? 23.7639 : LAT_INIT, lng: isNaN(LNG_INIT) ? 90.4067 : LNG_INIT };

            const map = new google.maps.Map(document.getElementById('map'), {
                center: start,
                zoom: 15,
                mapTypeControl: true,
                mapTypeControlOptions: {
                    style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
                    position: google.maps.ControlPosition.TOP_RIGHT,
                    mapTypeIds: ['roadmap', 'satellite', 'hybrid', 'terrain']
                },
                streetViewControl: true,
                zoomControl: true,
                fullscreenControl: true,
                scaleControl: true
            });

            // Traffic, Transit, Bicycling layers
            const trafficLayer = new google.maps.TrafficLayer();
            trafficLayer.setMap(map);

            const transitLayer = new google.maps.TransitLayer();
            transitLayer.setMap(map);

            const bikeLayer = new google.maps.BicyclingLayer();
            bikeLayer.setMap(map);

            // Marker
            const marker = new google.maps.Marker({
                position: start,
                map,
                draggable: true,
                title: 'Drag to set office location'
            });

            // Update Lat/Lng boxes
            latBox.value = start.lat.toFixed(6);
            lngBox.value = start.lng.toFixed(6);

            marker.addListener('dragend', () => {
                const p = marker.getPosition();
                latBox.value = p.lat().toFixed(6);
                lngBox.value = p.lng().toFixed(6);
            });

            // Click on map → move marker
            map.addListener('click', (e) => {
                const pos = e.latLng;
                marker.setPosition(pos);
                latBox.value = pos.lat().toFixed(6);
                lngBox.value = pos.lng().toFixed(6);
            });

            // Boxes → marker
            function tryMove() {
                const la = parseFloat(latBox.value), lo = parseFloat(lngBox.value);
                if (!isNaN(la) && !isNaN(lo)) {
                    const pos = new google.maps.LatLng(la, lo);
                    marker.setPosition(pos);
                    map.panTo(pos);
                }
            }
            latBox.addEventListener('change', tryMove);
            lngBox.addEventListener('change', tryMove);

            // ===== Search Box =====
            const input = document.createElement('input');
            input.type = 'text';
            input.placeholder = 'Search location...';
            input.style.cssText = 'box-sizing: border-box; border: 1px solid transparent; width: 240px; height: 32px; margin-top:10px; padding: 0 12px; border-radius: 3px; font-size: 14px; outline: none; text-overflow: ellipsis;';
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            const searchBox = new google.maps.places.SearchBox(input);
            map.addListener('bounds_changed', () => searchBox.setBounds(map.getBounds()));

            searchBox.addListener('places_changed', () => {
                const places = searchBox.getPlaces();
                if (!places || places.length === 0) return;

                const place = places[0];
                if (!place.geometry) return;

                const pos = place.geometry.location;
                marker.setPosition(pos);
                map.panTo(pos);
                latBox.value = pos.lat().toFixed(6);
                lngBox.value = pos.lng().toFixed(6);
            });
        };
    </script>

    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD9KaHcf_Sw05ojlYSyvTr-ERgXgvSsXXo&callback=initMap&libraries=places">
    </script>
}





@section Styles {
    <style>
        /* Avatar + Banner */
        .tnp-banner {
            height: 110px;
            background: linear-gradient(135deg, rgba(59,130,246,.18), rgba(99,102,241,.18));
            border-bottom: 1px solid var(--border);
        }

        .tnp-avatar-wrap {
            width: 128px;
            height: 128px;
            border-radius: 999px;
            padding: 3px;
            background: linear-gradient(135deg,var(--accent),rgba(99,102,241,.9));
            box-shadow: 0 8px 24px rgba(0,0,0,.15);
            flex-shrink: 0;
        }

        .tnp-avatar {
            width: 100%;
            height: 100%;
            border-radius: 999px;
            object-fit: cover;
            border: 3px solid var(--bg-soft);
        }

        .tn-dim {
            color: var(--muted) !important;
        }

        .tnp-name {
            font-weight: 800;
            letter-spacing: .2px;
        }

        .tn-subtitle {
            color: var(--muted);
            font-weight: 600;
            font-size: .85rem;
            letter-spacing: .3px;
        }

        .tnp-block {
            background: var(--bg-soft);
            border: 1px solid var(--border);
            border-radius: 1rem;
            padding: 1rem;
            box-shadow: 0 4px 16px rgba(0,0,0,.06);
        }

        .tnp-block-title {
            text-transform: uppercase;
            font-weight: 800;
            font-size: .9rem;
            letter-spacing: .12rem;
            color: var(--muted);
            border-bottom: 1px dashed var(--border);
            padding-bottom: .6rem;
            margin-bottom: 1rem;
        }

        .tnp-dl {
            display: grid;
            grid-template-columns: 160px 1fr;
            row-gap: .55rem;
            column-gap: 1.25rem;
        }

        .tn-alert {
            background: var(--bg-soft);
            border: 1px solid var(--border);
            color: var(--text);
            border-radius: 10px;
            padding: .5rem .75rem;
        }

        .tn-badge-date {
            display: inline-block;
            padding: .32rem .62rem;
            border-radius: 8px;
            font-size: .82rem;
            font-weight: 700;
            line-height: 1;
            border: 1px solid var(--border);
        }

        .tn-badge-status {
            display: inline-block;
            padding: .28rem .6rem;
            border-radius: 999px;
            border: 1px solid var(--border);
            font-weight: 700;
            font-size: .75rem;
        }

        .tn-badge-proposed {
            background: rgba(234,179,8,.18);
        }

        .tn-badge-ongoing {
            background: rgba(59,130,246,.18);
        }

        .tn-badge-completed {
            background: rgba(16,185,129,.22);
        }

        .tn-badge-cancelled {
            background: rgba(239,68,68,.18);
        }

        /* Chips */
        .tnp-chip {
            display: inline-flex;
            align-items: center;
            gap: .35rem;
            border-radius: 999px;
            padding: .42rem .8rem;
            background: rgba(59,130,246,.14);
            border: 1px solid rgba(59,130,246,.28);
            text-decoration: none;
            font-weight: 600;
            color: var(--text);
            max-width: 100%;
        }

            .tnp-chip:hover {
                background: rgba(59,130,246,.22);
            }

        /* Theses form grid */
        .thesis-form {
            display: grid;
            grid-template-columns: 1.2fr .8fr .8fr auto;
            gap: .5rem;
            align-items: center;
            min-width: 0;
        }

            .thesis-form .btn {
                white-space: nowrap;
            }

        /* Actions */
        .tn-thesis-actions form {
            display: inline-flex;
        }

        .tn-thesis-actions .btn {
            white-space: nowrap;
        }
    </style>
}
