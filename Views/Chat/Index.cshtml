﻿@{
Layout = "_Layout";
ViewData["Title"] = "Chatbot";
}

<div class="container py-4">
    <div class="card chat-shell shadow">

        <!-- Header -->
        <div class="card-header d-flex justify-content-between align-items-center gap-2">
            <div class="min-w-0">
                <h5 class="mb-0 text-truncate">ThesisNest Chatbot</h5>
                <small class="text-muted">Ask about thesis, guidelines, or tech help.</small>
            </div>
            <div class="d-flex align-items-center gap-2">
                <button id="toggleConvos" class="btn btn-outline-secondary d-md-none" type="button" aria-label="Conversations">
                    <i class="bi bi-list"></i>
                </button>
                <input id="userName" class="form-control form-control-sm" value="You" style="width:140px;" />
            </div>
        </div>

        <!-- Body -->
        <div class="card-body d-flex gap-3 position-relative chat-body">
            <!-- Left: conversations -->
            <aside id="convos" class="chat-left">
                <div class="d-flex align-items-center justify-content-between mb-2">
                    <h6 class="mb-0">Conversations</h6>
                    <button id="closeConvos" class="btn btn-sm btn-outline-secondary d-md-none" type="button" aria-label="Close">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div id="convoList" class="mt-2">
                    <button class="conversation active w-100 text-start">General</button>
                </div>
            </aside>

            <!-- Mobile backdrop -->
            <div id="chatMask" class="chat-mask d-md-none"></div>

            <!-- Right: chat area -->
            <section class="chat-right flex-grow-1 d-flex flex-column">
                <!-- Messages (sticks to bottom) -->
                <div id="messages" class="chat-messages flex-grow-1 overflow-auto"></div>
                <div id="typingIndicator" class="mt-1 text-muted" style="display:none;">Bot is typing...</div>

                <!-- Composer (sticky) -->
                <div id="composer" class="chat-composer d-flex gap-2 align-items-stretch">
                    <button id="emojiBtn" class="btn btn-outline-secondary" type="button" aria-label="Emoji">😀</button>
                    <input id="messageInput" type="text" class="form-control" placeholder="Type your message..." />
                    <button id="sendBtn" class="btn btn-primary" type="button">Send</button>
                </div>

                <!-- Emoji picker web component -->
                <emoji-picker id="emojiPicker" style="display:none; position:absolute; z-index:2000;"></emoji-picker>
            </section>
        </div>

        <!-- Footer -->
        <div class="card-footer text-muted text-center">
            <small>Powered by SignalR + Hugging Face</small>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/chat.css" asp-append-version="true" />
}

@section Scripts {

    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.12/signalr.min.js" crossorigin="anonymous"></script>


    <script type="module" src="https://cdn.jsdelivr.net/npm/emoji-picker-element@1/index.js"></script>

    <script src="~/js/chat.js" asp-append-version="true"></script>

    <script>
        // Off-canvas + emoji picker placement
        (function () {
          const convos = document.getElementById('convos');
          const mask = document.getElementById('chatMask');
          const openBtn = document.getElementById('toggleConvos');
          const closeBtn = document.getElementById('closeConvos');
          const open = () => { convos?.classList.add('open'); mask?.classList.add('show'); };
          const close = () => { convos?.classList.remove('open'); mask?.classList.remove('show'); };
          openBtn?.addEventListener('click', open);
          closeBtn?.addEventListener('click', close);
          mask?.addEventListener('click', close);
          document.addEventListener('keydown', e => { if (e.key === 'Escape') close(); });

          // Emoji picker toggle & position
          const emojiBtn = document.getElementById('emojiBtn');
          const picker = document.getElementById('emojiPicker');
          if (emojiBtn && picker) {
            emojiBtn.addEventListener('click', () => {
              const r = emojiBtn.getBoundingClientRect();
              picker.style.left = r.left + 'px';
              picker.style.top = (r.bottom + 8 + window.scrollY) + 'px';
              picker.style.display = picker.style.display === 'none' ? 'block' : 'none';
            });
            document.addEventListener('click', e => {
              if (!picker.contains(e.target) && e.target !== emojiBtn) picker.style.display = 'none';
            });
          }
        })();
    </script>
}